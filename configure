#!/bin/sh
# wrapper for using CMake options
#
# SPDX-FileCopyrightText: Â© The Clara Framework Authors
#
# SPDX-License-Identifier: Apache-2.0

set -e

# check cmake
if ! command -v cmake > /dev/null 2>&1; then
    cat << EOF >&2
Please install the CMake build tool.
Then you can call this configure script, which wraps and simplify
the equivalent CMake command to generate the build files.
EOF
    exit 1;
fi
cmake=$(command -v cmake)

# helper functions
usage() {
    cat << EOF
Usage: $0 [OPTION]... [VAR=VALUE]...

Build options:
  --build-type=TYPE         set CMake build type [RelWithDebInfo]:
                              - Debug: debugging flags enabled
                              - MinSizeRel: minimal output size
                              - Release: optimizations on, debugging off
                              - RelWithDebInfo: release flags plus debugging
  --build-dir=DIR           place build files in directory [build]

Installation directory:
  --prefix=PREFIX           installation directory [/usr/local]

Features (use --enable-FEATURE or --disable-FEATURE):
  tests                     compile tests [enabled]
EOF
}

add_cache_entry() {
    if [ -z "${cmake_cache}" ]; then
        cmake_cache="-D$1:$2=$3"
    else
        cmake_cache="${cmake_cache} \\\\\n    -D$1:$2=$3"
    fi
}

add_env_entry() {
    if [ -z "${cmake_env}" ]; then
        cmake_env="$1=$2"
    else
        cmake_env="${cmake_env} \\\\\n$1=$2"
    fi
}

ensure_value() {
    value="$(echo "$1" | sed 's/[-_a-zA-Z0-9]*=//')"
    if [ -z "${value}" ]; then
        echo "Error: missing value for '$1'" 1>&2
        exit 1
    fi
    echo "${value}"
}

# set defaults
src_dir="$(cd "$( dirname "$0")" && pwd)"

build_type=RelWithDebInfo
build_dir=build
prefix=/usr/local

cmake_cache=""
cmake_env=""

build_tests="ON"

# parse arguments
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg="$(ensure_value "$1")" ;;
        --enable-*) optarg="ON" ;;
        --disable-*) optarg="OFF" ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            usage
            exit
            ;;
        --build-type=*)
            build_type="${optarg}"
            ;;
        --build-dir=*)
            build_dir="${optarg}"
            ;;
        --prefix=*)
            prefix="${optarg}"
            ;;
        --*able-tests)
            build_tests="${optarg}"
            ;;
        *)
            echo "Error: unrecognized option '$1'"
            echo "Try $0 --help for more information"
            exit 1
            ;;
    esac
    shift
done


# set cmake configuration
add_cache_entry CMAKE_BUILD_TYPE STRING ${build_type}
add_cache_entry CMAKE_INSTALL_PREFIX PATH "\"${prefix}\""

add_cache_entry CLARA_BUILD_TESTS BOOL ${build_tests}


# generate config.status
mkdir -p "${build_dir}"
cd "${build_dir}"
config_status="config.status"

cat << EOF > "${config_status}"
#!/bin/sh
# Generated by configure.
# Run this file to recreate the current configuration.
set -e

cmake="$cmake"
src_dir="$src_dir"

echo "-- Found \$(\$cmake --version | head -1)"
echo "-- Source directory: \$src_dir"

# Delete cache to use a clean configuration
rm -f CMakeCache.txt

# Run CMake to generate build files
EOF

if [ ! -z "${cmake_env}" ]; then
    # shellcheck disable=SC2059
    printf "${cmake_env} \\\\\n" >> "${config_status}"
fi
echo "\$cmake \\" >> "${config_status}"
if [ ! -z "${cmake_cache}" ]; then
    # shellcheck disable=SC2059
    printf "    ${cmake_cache} \\\\\n" >> "${config_status}"
fi
echo "    \"\$src_dir\"" >> "${config_status}"

# run config
chmod u+x "${config_status}"
./"${config_status}"


# generate top-level Makefile
cat << EOF > "${src_dir}/Makefile"
# Makefile. Generated by configure.

ifeq (\$(findstring w,\$(lastword \$(MAKEFLAGS))),)
MAKEFLAGS += --no-print-directory
endif

BUILDDIR="${build_dir}"

all:
	+@\$(MAKE) -C \$(BUILDDIR)

install:
	+@\$(MAKE) -C \$(BUILDDIR) install

uninstall:
	+@\$(MAKE) -C \$(BUILDDIR) uninstall

check:
	+@if \$(MAKE) -sn -C \$(BUILDDIR) test > /dev/null 2>&1; \\
	then \$(MAKE) -C \$(BUILDDIR) test CTEST_OUTPUT_ON_FAILURE=1; \\
	else echo "No tests found!"; fi

test: check

integration_test:
	+@if \$(MAKE) -sn -C \$(BUILDDIR) integration_test > /dev/null 2>&1; \\
	then \$(MAKE) -C \$(BUILDDIR) integration_test CTEST_OUTPUT_ON_FAILURE=1; \\
	else echo "No integration tests found!"; fi

clean:
	+@\$(MAKE) -C \$(BUILDDIR) clean

distclean:
	rm -rf \$(BUILDDIR)
	rm -f ${config_status}
	rm -f Makefile

.PHONY : install check test integration_test clean distclean
EOF
